#!/usr/bin/python
# uvclass.py: class skeleton creation
# Generates C++ base function table for unknown objects
# Copyright 2009 John McMaster <JohnDMcMaster@gmail.com>

import sys

# header place at top of each file
copyright = """\
/*
 * Generated by uvclass.py
 * uvclass.py copyright 2009 John McMaster <JohnDMcMaster@gmail.com>
 */


"""

functionNamingStyle = "hex"

def usage():
	print 'uvclass.py'
	print 'Copyright 2009 John McMaster <JohnDMcMaster@gmail.com>'
	print 'Usage:'
	print 'uvclass.py <class name> <number virtual functions> [unknown return type]'

def functionName(functionOffset):
	if functionNamingStyle == "hex":
		return "functionPlus%.4X" % (functionOffset)
	elif functionNamingStyle == "dec":
		return "functionPlus" + str(functionOffset)
	else:
		raise "error"

def main():
	if len(sys.argv) < 3:
		usage()
		return

	className = sys.argv[1]
	numVirtualFunctions = sys.argv[2]

	if len(sys.argv) > 3:
		returnType = "MCAFEE_UNKNOWN_FUNCTION"
	else:
		# does not mess things up even for void on x86
		# returnType = "int"
		returnType = "void"

	toWrite = ""

	if copyright != "":
		toWrite += copyright
		toWrite += "\n"

	toWrite += "class " + className + "\n"
	toWrite += "{\n"

	# Virtual function table
	toWrite += "public:\n"
	for i in range(0, int(numVirtualFunctions)):
		functionOffset = i * 4
		toWrite += "\t//0x" + (("%X (%d)") % (functionOffset, functionOffset)) + "\n"
		toWrite += "\t" + returnType + " " + functionName(functionOffset) + "();\n"
		toWrite += "\n"

	# Class members
	toWrite += "public:\n"
	toWrite += "\tm_padding[0x01]\n"
	toWrite += "};\n"

	print toWrite

if __name__ == "__main__":
    main()
