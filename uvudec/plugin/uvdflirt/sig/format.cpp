/*
UVNet Universal Decompiler (uvudec)
Copyright 2010 John McMaster <JohnDMcMaster@gmail.com>
Licensed under the terms of the LGPL V3 or later, see COPYING for details

Some code originally from
http://www.woodmann.com/forum/showthread.php?7517-IDA-signature-file-format
*/

#include "uvdflirt/sig/format.h"

#define FLAG_STRING(flag, str)			if (flags & flag) { if(!ret.empty()) ret += " "; ret += str; }
#define FLAG_STRING_RAW(flag)			FLAG_STRING(flag, uvd_stringify(flag))
#define CASE_STRING(define, str)		if (in == define) return str;

std::string UVDIDASigFeaturesToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD_FLIRT_SIG_FEATURE_STARTUP, "STARTUP");
	FLAG_STRING(UVD_FLIRT_SIG_FEATURE_CTYPE_CRC, "CTYPE_CRC");
	FLAG_STRING(UVD_FLIRT_SIG_FEATURE_2BYTE_CTYPE, "2BYTE_CTYPE");
	FLAG_STRING(UVD_FLIRT_SIG_FEATURE_ALT_CTYPE_CRC, "ALT_CTYPE_CRC");
	FLAG_STRING(UVD_FLIRT_SIG_FEATURE_COMPRESSED, "COMPRESSED");

	return ret;
}

std::string UVDIDASigArchToString(uint32_t in)
{
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_80X86, "80X86");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_Z80, "Z80");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_INTEL_860, "INTEL_860");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_8051, "8051");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TMS320C5X, "TMS320C5X");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_6502, "6502");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_PDP11, "PDP11");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MOTOROLA_680X0, "MOTOROLA_680X0");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_JAVA, "JAVA");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MOTOROLA_68XX, "MOTOROLA_68XX");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_SGS_THOMSON_ST7, "SGS_THOMSON_ST7");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MOTOROLA_68HC12, "MOTOROLA_68HC12");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MIPS, "MIPS");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_ADVANCED_RISC, "ADVANCED_RISC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TMS320C6X, "TMS320C6X");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_POWERPC, "POWERPC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_INTEL_80196, "INTEL_80196");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_Z8, "Z8");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_HITACHI_SH, "HITACHI_SH");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MSVS_DOT_NET, "MSVS_DOT_NET");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_ATMEL_8_BIT_RISC, "ATMEL_8_BIT_RISC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_HITACHI_H8_300_H8_2000, "HITACHI_H8_300_H8_2000");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MICROCHIP_PIC, "MICROCHIP_PIC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_SPARC, "SPARC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_DEC_ALPHA, "DEC_ALPHA");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_HP_PA_RISC, "HP_PA_RISC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_HITACHI_H8_500, "HITACHI_H8_500");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TASKING_TRICORE, "TASKING_TRICORE");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MOTOROLA_DSP5600X, "MOTOROLA_DSP5600X");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_SIEMENS_C166, "SIEMENS_C166");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_SGS_THOMSON_ST20, "SGS_THOMSON_ST20");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_INTEL_ITANIUM_IA64, "INTEL_ITANIUM_IA64");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_INTEL_I960, "INTEL_I960");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_FUJITSU_F2MC_16, "FUJITSU_F2MC_16");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TMS320C54XX, "TMS320C54XX");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TMS320C55XX, "TMS320C55XX");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_TRIMEDIA, "TRIMEDIA");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MITSUBISH_32_BIT_RISC, "MITSUBISH_BIT_RISC");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_NEC_78K0, "NEC_78K0");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_NEC_78K0S, "NEC_78K0S");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MITSUBISHI_8_BIT, "MITSUBISHI_8_BIT");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MITSIBUSHI_16_BIT, "MITSIBUSHI_16_BIT");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_ST9PLUS, "ST9PLUS");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_FUJITSU_FR, "FUJITSU_FR");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MOTOROLA_68HC16, "MOTOROLA_68HC16");
	CASE_STRING(UVD_FLIRT_SIG_PROCESSOR_ID_MITSUBISHI_7900, "MITSUBISHI_7900");
	return "UNKNOWN";
}

std::string UVDIDASigOSToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD_FLIRT_SIG_OS_MSDOS, "MSDOS");
	FLAG_STRING(UVD_FLIRT_SIG_OS_WIN, "WIN");
	FLAG_STRING(UVD_FLIRT_SIG_OS_OS2, "OS2");
	FLAG_STRING(UVD_FLIRT_SIG_OS_NETWARE, "NETWARE");
	FLAG_STRING(UVD_FLIRT_SIG_OS_UNIX, "UNIX");

	return ret;
}

std::string UVDIDASigApplicationToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD_FLIRT_SIG_APP_CONSOLE, "CONSOLE");
	FLAG_STRING(UVD_FLIRT_SIG_APP_GRAPHICS, "GRAPHICS");
	FLAG_STRING(UVD_FLIRT_SIG_APP_EXE, "EXE");
	FLAG_STRING(UVD_FLIRT_SIG_APP_DLL, "DLL");
	FLAG_STRING(UVD_FLIRT_SIG_APP_DRV, "DRV");
	FLAG_STRING(UVD_FLIRT_SIG_APP_SINGLE_THREADED, "SINGLE_THREADED");
	FLAG_STRING(UVD_FLIRT_SIG_APP_MULTI_THREADED, "MULTI_THREADED");
	FLAG_STRING(UVD_FLIRT_SIG_APP_16_BIT, "16_BIT");
	FLAG_STRING(UVD_FLIRT_SIG_APP_32_BIT, "32_BIT");
	FLAG_STRING(UVD_FLIRT_SIG_APP_64_BIT, "64_BIT");

	return ret;
}

std::string UVDIDASigFileToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD_FLIRT_SIG_FILE_DOS_EXE_OLD, "DOS_EXE_OLD");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_DOS_COM_OLD, "DOS_COM_OLD");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_BIN, "BIN");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_DOSDRV, "DOSDRV");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_NE, "NE");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_INTELHEX, "INTELHEX");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_MOSHEX, "MOSHEX");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_LX, "LX");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_LE, "LE");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_NLM, "NLM");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_COFF, "COFF");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_PE, "PE");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_OMF, "OMF");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_SREC, "SREC");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_ZIP, "ZIP");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_OMFLIB, "OMFLIB");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_AR, "AR");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_LOADER, "LOADER");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_ELF, "ELF");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_W32RUN, "W32RUN");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_AOUT, "AOUT");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_PILOT, "PILOT");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_DOS_EXE, "EXE");
	FLAG_STRING(UVD_FLIRT_SIG_FILE_AIXAR, "AIXAR");

	return ret;
}

