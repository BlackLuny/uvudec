UVNet Universal Decompiler (uvudec)
Copyright 2008-2010 John McMaster <JohnDMcMaster@gmail.com>
Licensed under the terms of the LGPL V3 or later, see COPYING for details

Thanks to Sean O'Sullivan and RCOS for helping fund the development of the
FLIRT/FLAIR compatibility!
Go Moorthy!  (http://www.cs.rpi.edu/~moorthy/)

Thanks to Rob Escriva / RPISec for initial project hosting! (now on github)

This application is primarily targetted at embedded platforms.  These typically
have relativly simple instruction sets that can be easily represented by a
simple opcode configuration file.  This program will not be fast, but the
idea is to try to make new architectures easy to support.

Generic compiler target support is under development.  Currently assemblers
and compilers are isolated, but should soon be unified.

Main tools
uvudec: command line interface for one shot disassembling and decomping functionality
uvdgui: graphical interface to libuvudec
uvobj2pat: object to IDA .pat file
uvpat2sig: IDA .pat to IDA .sig file
uvflirtutil: general FLIRT related utilities (dump and eventually compress, decompress, etc)

Utility tools
uvinj.py: create a C/C++ DLL injection template
uvclass.py: create a C++ virtual class template


FAQ

Q: How do I add support for a new processor?
A: Take a look at some of the architecture plugins.  Unfortunatly, there is no
currently good reference plugin that does everything.
If you want something quick and dirty, look at the 8051 uvdasm example.  Please
send in a file you created if you found it remotely useful for some
architecture!

Q: But I need feature X for the new processor?
A: Some features are known to be lacking that will hopefully be supported
soon.  Contact me if you'd really like the feature and I can try to work on it
or work with you/someone to generate a patch for it.

Q: Can I use this is a library for application X?
A: With minor modifications you probably could.  That was the original intent
and I have tried to keep it with relativly clean external interfaces to allow
for that.

Q: What is this project's relationship to Hex-Rays/IDA?
A: None, the rays are UV and would erase my EPROM.
However, both are designed to work with standard formats, so some files will
be compatible.  At time of writting, mostly this is on TODO list.  List of
related file types:
-.map: used by Visual Studio (TODO)
-.pat: IDA text files for function signatures, moderatly open format
-.sig: IDA fast function signatures, 
Don't expect IDA project files to be directly importable, but I might write a
plugin to import from REML.

Q: What would really help this project?
A: Embedded compilers (if its permissible to give it to me) and system images.

Q: What was used to test this?
A: I initially used a 80C32 image from a laser as the base image.  As a
non-biased testing sample, I have 80C32 images from Cisco switches.  I've now
been writing unit tests and expanding the number of objects I can check in
without legal issues.

Q: Why are assemblers listed as "compilers"?
A: Because they're close enough for the purpose of this project.
I couldn't think of a better common name at the time...language I guess.

Q: Why not use libelf for ELF support?
A: libelf didn't appear to do the relocations for me, which was most of the
heavy lifting.  Actual ELF files are not hard to write to, so it made much
cleaner code not to bother and just use elf.h.  I'd like to make bin2obj
use the object plugin system to write object files.  In that case, I'll keep
some junky ELF plugin I wrote and allow use of binutils if people want better
support with the extra effert of having binutils development setup.

Q: What is the EM_UVUDEC value?
A: TIS only defines a limited number of EM_* values.  The scope of this project
easily leads itself to needing to specify many non-standard architectures.
Additionally, many architectures need to be further refined from the base EM_*
value, such as defining the differences between different MIPS processor cores.
To make using other tools easy as possible though, if a standard value exists,
e_machine will be set to the standard value.  Always check for the .uvudec
section for extended information even if a base architecture is specified.
If there is a conflict, you probably want to take the .uvudec section value.

Q: How did you chose the EM_UVUDEC value?
A:
In <elf.h>:
If it is necessary to assign new unofficial EM_* values, please
pick large random numbers (0x8523, 0xa7f2, etc.) to minimize the
chances of collision with official or non-GNU unofficial values.  

So...

[mcmaster@localhost uvudec]$ python
Python 2.4.6 (#1, Sep 11 2009, 13:42:46)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> random.seed()
>>> random.randint(0x8000, 0xFFFF)
47842
Using gcalctool:
47842 -> 0xBAE2

Q: Can it decompile programs written by Mel?
A: Sorry, I'm not that 1337.


Building

Original development was done on CentOS 5.3 and now Fedora 13.  There are
likely to be errors that are trivially fixed that are generated on other
platforms (ie bad include assumptions).  I will try to fix this as it gets
closer to Alpha status.

Originally for uvdasm I was experimenting with different interpreters, but now
only Python is officially supported.  It can be used with the CPython API
(reccomended), or by using python through the command line (huge performance
hit).

