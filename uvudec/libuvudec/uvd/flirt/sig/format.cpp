/*
UVNet Universal Decompiler (uvudec)
Copyright 2010 John McMaster <JohnDMcMaster@gmail.com>
Licensed under the terms of the LGPL V3 or later, see COPYING for details

Some code originally from
http://www.woodmann.com/forum/showthread.php?7517-IDA-signature-file-format
*/

#include "uvd/flirt/sig/format.h"

#define __stringify_1(x)	#x
#define __stringify(x)		__stringify_1(x)
#define FLAG_STRING(flag, str)			if (flags & flag) { if(!ret.empty()) ret += " "; ret += str; }
#define FLAG_STRING_RAW(flag)			FLAG_STRING(flag, __stringify(flag))
#define CASE_STRING(define, str)		if (in == define) return str;

std::string UVDIDASigFeaturesToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD__IDASIG__FEATURE__STARTUP, "STARTUP");
	FLAG_STRING(UVD__IDASIG__FEATURE__CTYPE_CRC, "CTYPE_CRC");
	FLAG_STRING(UVD__IDASIG__FEATURE__2BYTE_CTYPE, "2BYTE_CTYPE");
	FLAG_STRING(UVD__IDASIG__FEATURE__ALT_CTYPE_CRC, "ALT_CTYPE_CRC");
	FLAG_STRING(UVD__IDASIG__FEATURE__COMPRESSED, "COMPRESSED");

	return ret;
}

std::string UVDIDASigArchToString(uint32_t in)
{
	CASE_STRING(UVD__IDASIG__ARCH__80X86, "80X86");
	CASE_STRING(UVD__IDASIG__ARCH__Z80, "Z80");
	CASE_STRING(UVD__IDASIG__ARCH__INTEL_860, "INTEL_860");
	CASE_STRING(UVD__IDASIG__ARCH__8051, "8051");
	CASE_STRING(UVD__IDASIG__ARCH__TMS320C5X, "TMS320C5X");
	CASE_STRING(UVD__IDASIG__ARCH__6502, "6502");
	CASE_STRING(UVD__IDASIG__ARCH__PDP11, "PDP11");
	CASE_STRING(UVD__IDASIG__ARCH__MOTOROLA_680X0, "MOTOROLA_680X0");
	CASE_STRING(UVD__IDASIG__ARCH__JAVA, "JAVA");
	CASE_STRING(UVD__IDASIG__ARCH__MOTOROLA_68XX, "MOTOROLA_68XX");
	CASE_STRING(UVD__IDASIG__ARCH__SGS_THOMSON_ST7, "SGS_THOMSON_ST7");
	CASE_STRING(UVD__IDASIG__ARCH__MOTOROLA_68HC12, "MOTOROLA_68HC12");
	CASE_STRING(UVD__IDASIG__ARCH__MIPS, "MIPS");
	CASE_STRING(UVD__IDASIG__ARCH__ADVANCED_RISC, "ADVANCED_RISC");
	CASE_STRING(UVD__IDASIG__ARCH__TMS320C6X, "TMS320C6X");
	CASE_STRING(UVD__IDASIG__ARCH__POWERPC, "POWERPC");
	CASE_STRING(UVD__IDASIG__ARCH__INTEL_80196, "INTEL_80196");
	CASE_STRING(UVD__IDASIG__ARCH__Z8, "Z8");
	CASE_STRING(UVD__IDASIG__ARCH__HITACHI_SH, "HITACHI_SH");
	CASE_STRING(UVD__IDASIG__ARCH__MSVS_DOT_NET, "MSVS_DOT_NET");
	CASE_STRING(UVD__IDASIG__ARCH__ATMEL_8_BIT_RISC, "ATMEL_8_BIT_RISC");
	CASE_STRING(UVD__IDASIG__ARCH__HITACHI_H8_300_H8_2000, "HITACHI_H8_300_H8_2000");
	CASE_STRING(UVD__IDASIG__ARCH__MICROCHIP_PIC, "MICROCHIP_PIC");
	CASE_STRING(UVD__IDASIG__ARCH__SPARC, "SPARC");
	CASE_STRING(UVD__IDASIG__ARCH__DEC_ALPHA, "DEC_ALPHA");
	CASE_STRING(UVD__IDASIG__ARCH__HP_PA_RISC, "HP_PA_RISC");
	CASE_STRING(UVD__IDASIG__ARCH__HITACHI_H8_500, "HITACHI_H8_500");
	CASE_STRING(UVD__IDASIG__ARCH__TASKING_TRICORE, "TASKING_TRICORE");
	CASE_STRING(UVD__IDASIG__ARCH__MOTOROLA_DSP5600X, "MOTOROLA_DSP5600X");
	CASE_STRING(UVD__IDASIG__ARCH__SIEMENS_C166, "SIEMENS_C166");
	CASE_STRING(UVD__IDASIG__ARCH__SGS_THOMSON_ST20, "SGS_THOMSON_ST20");
	CASE_STRING(UVD__IDASIG__ARCH__INTEL_ITANIUM_IA64, "INTEL_ITANIUM_IA64");
	CASE_STRING(UVD__IDASIG__ARCH__INTEL_I960, "INTEL_I960");
	CASE_STRING(UVD__IDASIG__ARCH__FUJITSU_F2MC_16, "FUJITSU_F2MC_16");
	CASE_STRING(UVD__IDASIG__ARCH__TMS320C54XX, "TMS320C54XX");
	CASE_STRING(UVD__IDASIG__ARCH__TMS320C55XX, "TMS320C55XX");
	CASE_STRING(UVD__IDASIG__ARCH__TRIMEDIA, "TRIMEDIA");
	CASE_STRING(UVD__IDASIG__ARCH__MITSUBISH_32_BIT_RISC, "MITSUBISH_BIT_RISC");
	CASE_STRING(UVD__IDASIG__ARCH__NEC_78K0, "NEC_78K0");
	CASE_STRING(UVD__IDASIG__ARCH__NEC_78K0S, "NEC_78K0S");
	CASE_STRING(UVD__IDASIG__ARCH__MITSUBISHI_8_BIT, "MITSUBISHI_8_BIT");
	CASE_STRING(UVD__IDASIG__ARCH__MITSIBUSHI_16_BIT, "MITSIBUSHI_16_BIT");
	CASE_STRING(UVD__IDASIG__ARCH__ST9PLUS, "ST9PLUS");
	CASE_STRING(UVD__IDASIG__ARCH__FUJITSU_FR, "FUJITSU_FR");
	CASE_STRING(UVD__IDASIG__ARCH__MOTOROLA_68HC16, "MOTOROLA_68HC16");
	CASE_STRING(UVD__IDASIG__ARCH__MITSUBISHI_7900, "MITSUBISHI_7900");
	return "UNKNOWN";
}

std::string UVDIDASigOSToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD__IDASIG__OS__MSDOS, "MSDOS");
	FLAG_STRING(UVD__IDASIG__OS__WIN, "WIN");
	FLAG_STRING(UVD__IDASIG__OS__OS2, "OS2");
	FLAG_STRING(UVD__IDASIG__OS__NETWARE, "NETWARE");
	FLAG_STRING(UVD__IDASIG__OS__UNIX, "UNIX");

	return ret;
}

std::string UVDIDASigApplicationToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD__IDASIG__APP__CONSOLE, "CONSOLE");
	FLAG_STRING(UVD__IDASIG__APP__GRAPHICS, "GRAPHICS");
	FLAG_STRING(UVD__IDASIG__APP__EXE, "EXE");
	FLAG_STRING(UVD__IDASIG__APP__DLL, "DLL");
	FLAG_STRING(UVD__IDASIG__APP__DRV, "DRV");
	FLAG_STRING(UVD__IDASIG__APP__SINGLE_THREADED, "SINGLE_THREADED");
	FLAG_STRING(UVD__IDASIG__APP__MULTI_THREADED, "MULTI_THREADED");
	FLAG_STRING(UVD__IDASIG__APP__16_BIT, "16_BIT");
	FLAG_STRING(UVD__IDASIG__APP__32_BIT, "32_BIT");
	FLAG_STRING(UVD__IDASIG__APP__64_BIT, "64_BIT");

	return ret;
}

std::string UVDIDASigFileToString(uint32_t flags)
{
	std::string ret;

	FLAG_STRING(UVD__IDASIG__FILE__DOS_EXE_OLD, "DOS_EXE_OLD");
	FLAG_STRING(UVD__IDASIG__FILE__DOS_COM_OLD, "DOS_COM_OLD");
	FLAG_STRING(UVD__IDASIG__FILE__BIN, "BIN");
	FLAG_STRING(UVD__IDASIG__FILE__DOSDRV, "DOSDRV");
	FLAG_STRING(UVD__IDASIG__FILE__NE, "NE");
	FLAG_STRING(UVD__IDASIG__FILE__INTELHEX, "INTELHEX");
	FLAG_STRING(UVD__IDASIG__FILE__MOSHEX, "MOSHEX");
	FLAG_STRING(UVD__IDASIG__FILE__LX, "LX");
	FLAG_STRING(UVD__IDASIG__FILE__LE, "LE");
	FLAG_STRING(UVD__IDASIG__FILE__NLM, "NLM");
	FLAG_STRING(UVD__IDASIG__FILE__COFF, "COFF");
	FLAG_STRING(UVD__IDASIG__FILE__PE, "PE");
	FLAG_STRING(UVD__IDASIG__FILE__OMF, "OMF");
	FLAG_STRING(UVD__IDASIG__FILE__SREC, "SREC");
	FLAG_STRING(UVD__IDASIG__FILE__ZIP, "ZIP");
	FLAG_STRING(UVD__IDASIG__FILE__OMFLIB, "OMFLIB");
	FLAG_STRING(UVD__IDASIG__FILE__AR, "AR");
	FLAG_STRING(UVD__IDASIG__FILE__LOADER, "LOADER");
	FLAG_STRING(UVD__IDASIG__FILE__ELF, "ELF");
	FLAG_STRING(UVD__IDASIG__FILE__W32RUN, "W32RUN");
	FLAG_STRING(UVD__IDASIG__FILE__AOUT, "AOUT");
	FLAG_STRING(UVD__IDASIG__FILE__PILOT, "PILOT");
	FLAG_STRING(UVD__IDASIG__FILE__DOS_EXE, "EXE");
	FLAG_STRING(UVD__IDASIG__FILE__AIXAR, "AIXAR");

	return ret;
}

