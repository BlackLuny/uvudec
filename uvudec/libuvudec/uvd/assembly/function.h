/*
UVNet Universal Decompiler (uvudec)
Copyright 2008 John McMaster <JohnDMcMaster@gmail.com>
Licensed under the terms of the LGPL V3 or later, see COPYING for details
*/

#ifndef UVD_FUNCTION_H
#define UVD_FUNCTION_H

#include "uvd/util/types.h"
#include "uvd/data/data.h"
#include "uvd/relocation/relocation.h"
#include "uvd/assembly/symbol.h"
#include <string>
#include <vector>


//A function as found in an executable (binary) as opposed to a config function
//Intended for current analysis
class UVD;
class UVDBinaryFunction : public UVDBinarySymbol
{
public:
	UVDBinaryFunction();
	~UVDBinaryFunction();
	uv_err_t deinit();
 
 	//Locations in the source file
	uv_err_t getMin(uint32_t *out);
	uv_err_t getMax(uint32_t *out);

	static uv_err_t getUVDBinaryFunctionInstance(UVDBinaryFunction **out);

public:
	//Raw binary representation of function as it was found in the program
	//This version should not be processed for relocatables
	//We own this
	//UVDData *m_data;
	//XXX: this seems like an odd thing to track here
	//Analysis engine generated by
	//UVD *m_uvd;
	//The generated function info
	//m_shared should have a single m_representations
	//maybe later we link into a db could have multiple?
	//UVDBinaryFunctionShared *m_shared;
	//Offset that was found at in original data (m_uvd->m_data)
	//FIXME: this should instead be uv_addr_t m_address;
	//Size can be queried from m_data
	//actually, this is taken care of by m_symbolAddress
	//uint32_t m_offset;
};

#endif //UVD_FUNCTION_H

