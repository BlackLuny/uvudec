An experimental Trac bug tracker is at http://trac6.assembla.com/uvudec/
Most things will likely start moving from here to there.

Top priority
-Fix issues with generted object files
	Add object file generation unit tests
-Fix rpat port
	Convert rpat to more C++ style implementation
	Add unit tests
-Finish reversing .sig format
	Then implement uvpat2sig
	uvpat2sig unit tests

TODO
-After much R&D, I have concluded that the ELF construction method sucks
	-UVDRelocation is overused
	-The process would be much simpler to just have a "do update" function on all sections
	-Following the do update, grab the section data
	-Should be able to use the relocations for the legacy code, and then replcae one by one with simple updates
-Improve complicated operand printing
-Stop memory leaks: fill in destructors
-Function call resolution in DB functions
	Resolves relative call issues
	Normalize values to make even hashes?
		Immediates
		Addresses
-Export functions to database
	Will allow perfect decompilation of known coderee
	In progress...connected.
-Support more architectures
-Config improvements
	Can any of this use libconfig?
		http://www.hyperrealm.com/libconfig/
	Processor
		-Support config pre-processor
		-Allows inheritance of processor families
	Arguments
		-Create property based config
-Parse while loops
-Parse for loops
-Parse if/else
-Intelligent conditionals
	Instead of
		temp = i - 32;
		if( temp > 0 )
			temp = 64 - i
			if( temp > 0 )
	Use
		if( i > 32 && i < 64 )
	Could also be done as part of a logic analyzer
-Parse switch (early impl as if?)
-Target decompilation for actual assemblers/compilers
-Create a C interface, if desired
-Trim non-coding parts of code
	Ex: function may have a few bytes padding after RET for alignment on next function
-Logic/flow analyzer
	Find independance of variables
Research: other projects
	-BFD
		http://sourceware.org/binutils/
		GPL
			Could not distributed binaries linked with it
		Migrate ELF support to use libbfd
			Project mutated from uvelf which was a learning project
			Probably should use libbfd as much as possible
		Adds support for a number of binary formats
	-s-record
		http://srecord.sourceforge.net/
		GPL
		Has a library that can read lots of embeded formats
		Contacted author, after some time responded saying would add support soon or something
		Might fork project and dev as needed
		He isn't putting code into SVN!  Just uses sourceforge to post builds it seems
			Admittedly I do something similar with github
			I should fix the github issue rather than hacking around it
			I do provide a link to the real repo though
	-Look into Qemu deeper
		http://wiki.qemu.org/Main_Page
		GPL
			With other components...
		Hardware (peripheral) desciption language
		See if can make IR translator to take advantage of supported architectures
	-clang, LVM
		http://llvm.org/
		License: University of Illinois/NCSA
			Ug uh um I'll have to read it
			But looks like BSD
		Nifty instruction translation stuff
	-Look at Bastard deeper
		http://bastard.sourceforge.net/
		Seems to be mostly i386 targetted?
		Its on the back burner and is said to likely be going through major rewrites
		Does in fact provide a stand alone libdisassembly though
		Saw at least one other project that uses this engine, might be helpful
	-ciasdis
		x86 only (+ some alpha support)
		has some interesting disassembly engine properties
	-Valgrind
		http://valgrind.org/
		I use this for checking for mem leaks/errors
		Also has pretty nifty memory analysis engine
		Can leverge this?  
		Supposedly can writey our own allocators, might allow easy
	-OllyDbg
		http://www.ollydbg.de/
		Free as in beer
		Windows x86 only
		Tool works nicely, probably has some features might want to support
	-SUIF
		http://suif.stanford.edu/
		Has some compiler research stuff targetted towards generic compiling
		May give ideas how to write IR to support many archs
	-Third party decompilation
		Might be able to combine analysis or selectivly decompile as tools do it best?
		Reverse Engneering Compiler (REC)
			http://www.backerstreet.com/rec/rec.htm
			Free as in beer, not as in speech
			Plugin to make REC command line calls?
			x86
			MIPS (R3000)
			PowerPC
			68K
		.NET reflector?
			http://www.red-gate.com/products/reflector/
			Commercial, but free as in beer version availible
			Specialized decompilation?
			In any case, requires visual studio
			Might still be a good research topic
				Has anti-decompile license clause...ironic
		IDA/Hex-rays
			http://www.hex-rays.com/
			Commercial
			If you had hex-rays, you probably wouldn't bother with this
			Until one day hopefully :)
			Supports lots of archs, but which are supported well?
		-binstat
			http://rpisec.net/projects/show/rcosbinstat
			Alex's project
		-BitBlaze
			http://bitblaze.cs.berkeley.edu/
			Has various libs (from Berk as well) might be able to use
			Has some bells and whistels on the website
			***This should be looked at
			vine
				Static analysis
				GPL
			TEMU
				Dynamic analysis
				Prob GPL
			Rudder
				Online dynamic symbol analysis
				No public release?
-Write a OllyDbg plugin to import analysis data
	Also, look at format IDA/WinICE uses for storing debugging information
		Uses FLAIR format or something
		flair38 use to be avail for free DL from Data Rescue, this version is widely around on the Internet still
		uses .map file to tell what address is what label
			these are used by VC6
		also used to load comments
		Using MapConv
			To get the calls to load the symbol, load labels
			To get comments at each func, load comments
		ex
			 Start         Length     Name                   Class
			 0001:00000000 00009D16AH .text                  CODE
			 0002:00000000 00002874AH .rdata                 DATA
			 0003:00000000 0000083A4H .data                  DATA
			 0004:00000000 000000330H .rsrc                  DATA


			  Address         Publics by Value

			 0001:00000000       std::char_traits<char>::assign(char &,char const &)
			 0001:00000012       std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)
			 0001:0000002E       std::char_traits<char>::_Move_s(char *,uint,char const *,uint)
			 ...
			 0001:0009D142       sub_49E142
			 0001:0009D14C       sub_49E14C
			 0001:0009D156       loc_49E156
			 0002:00000280       unk_49F280
			 0002:000004B0       unk_49F4B0
			 ...
			 0003:0000839C       dword_4D039C
			 0003:000083A0       unk_4D03A0

			Program entry point at 0001:00071218
	IDA
		autoload.cfg file
			Header
				;
				; This file contains names of type library files to load when corresponding
				; signature file is loaded.
				;
				; The format is:
				;
				; <signature file name>           <til file name>
				;
				; If several til files are specified, they should be separated
				; by commas.
				;			
			Text files
			what are the type library files?  Those DLL thingies (.tlb)?
		.sig file
			Header
				IDASGN
			Binary files
			Human readable strings, so prob not encrypted
			Ollyplugin suppose to import these, see if can get source for plugin
			.sig format
			http://www.hex-rays.com/idapro/flirt.htm
		.proc files
			to support processors
			appears to be actually DLLs or something similar
			calls them IDP modules
		.idc files
			IDA C file
			binary loaders
			some sort of source code
			compiled when IDA starts the exe
		.cfg file
			help to decide what processor to load
		.ids file
			?
			Header
				IDAIDS					
			binary
			idsnames
				;
				;       This file contains IDS file names for
				;       modules with strange names, like "ld-linux.so.1"
				;       Format is:
				;         <module_name> <ids_name>  +/- <til_files>
				;
				;       If there is a '-' sign after the replacement name, then
				;       imports by ordinals will not be used for the IDS file
				;
				;       If there are any til files, they will be loaded automatically
				;       when the ids file gets loaded
				;       The til files may have conditional expressions in the following form:
				;
				;               condition ? til-files : til-files;
				;
				;       which works like C ternary operator.
				;       The conditional expressions may be nested.
				;       2 condition types are supported:
				;          name - will be checked against the current processor module name
				;          number - will be checked against the bitness of the program
				;                   2 bitnesses are supported: 32 and 64
				;
		.til file
			Header
				IDATIL
			Binary
			Architecture dependent
		
		they say cannot automatically generate recognition of main
			my idea
			automatically generate serveral C files with differing main, but only by the assignment of a variable/constant values
			main will be the function with the differing constants
			assumes the compiler will not do any weird optimizations due to the constant values
				chose loarge arbitrary constants to stifle specific optimizations
				ex: myVar = 0 can be XOR EAX, EAX, but myVar = 0x3422312 is hard to specialize
			
-Look at SDCC peephole optimizer
	Scripting of optimizations
	May be able to provide a compatible reverse form?
-Be able to support 64 bit architectures
